{
	"name": "df_transform_hospital_Admissions",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_raw_Hospital_admissions",
						"type": "DatasetReference"
					},
					"name": "sourceHospitalAdmissionsdaily"
				},
				{
					"dataset": {
						"referenceName": "ds_raw_lookup",
						"type": "DatasetReference"
					},
					"name": "lookupRawSource"
				},
				{
					"dataset": {
						"referenceName": "ds_dimdate_lookup",
						"type": "DatasetReference"
					},
					"name": "dimDateSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_hospital_admissions_weekly",
						"type": "DatasetReference"
					},
					"name": "sinkHospitalAdmission"
				},
				{
					"dataset": {
						"referenceName": "ds_hospital_admissions_daily",
						"type": "DatasetReference"
					},
					"name": "sinkDaily"
				}
			],
			"transformations": [
				{
					"name": "selectReqFields"
				},
				{
					"name": "lookupProcessedData"
				},
				{
					"name": "selectReqFields2"
				},
				{
					"name": "splitDailyFromWeekly"
				},
				{
					"name": "aggDimDate"
				},
				{
					"name": "joinWeeklyAndDimData"
				},
				{
					"name": "pivotWeeky"
				},
				{
					"name": "pivotDaily"
				},
				{
					"name": "sortWeekly"
				},
				{
					"name": "sortDaily"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as date,",
				"          year_week as string,",
				"          value as double,",
				"          source as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: true,",
				"     limit: 100,",
				"     ignoreNoFilesFound: false) ~> sourceHospitalAdmissionsdaily",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> lookupRawSource",
				"source(output(",
				"          date_key as integer,",
				"          date as date,",
				"          year as string,",
				"          month as short,",
				"          day as short,",
				"          day_name as string,",
				"          day_of_year as short,",
				"          week_of_month as short,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as integer,",
				"          year_week as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 100,",
				"     ignoreNoFilesFound: false) ~> dimDateSource",
				"sourceHospitalAdmissionsdaily select(mapColumn(",
				"          country,",
				"          indicator,",
				"          reported_date = date,",
				"          reported_year_week = year_week,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectReqFields",
				"selectReqFields, lookupRawSource lookup(selectReqFields@country == lookupRawSource@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupProcessedData",
				"lookupProcessedData select(mapColumn(",
				"          country = selectReqFields@country,",
				"          country_code_3_digit,",
				"          country_code_2_digit,",
				"          population,",
				"          indicator,",
				"          value,",
				"          reported_date,",
				"          reported_year_week,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectReqFields2",
				"selectReqFields2 split(indicator == 'Weekly new hospital admissions per 100k' || indicator== 'Weekly new ICU admissions per 100k',",
				"     disjoint: false) ~> splitDailyFromWeekly@(weekly, daily)",
				"dimDateSource aggregate(groupBy(ECDC_week_year = year+'-W'+lpad(week_of_year,2,'0')),",
				"     weekStartDate = min(date),",
				"          weekEndDaye = max(date)) ~> aggDimDate",
				"splitDailyFromWeekly@weekly, aggDimDate join(reported_year_week == ECDC_week_year,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinWeeklyAndDimData",
				"joinWeeklyAndDimData pivot(groupBy(country,",
				"          country_code_3_digit,",
				"          country_code_2_digit,",
				"          population,",
				"          reported_date,",
				"          reported_year_week,",
				"          source,",
				"          weekStartDate,",
				"          weekEndDaye),",
				"     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU admissions per 100k']),",
				"     count = sum(value),",
				"     columnNaming: '$N$V',",
				"     lateral: true) ~> pivotWeeky",
				"splitDailyFromWeekly@daily pivot(groupBy(country,",
				"          country_code_3_digit,",
				"          country_code_2_digit,",
				"          population,",
				"          reported_date,",
				"          reported_year_week,",
				"          source),",
				"     pivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),",
				"     count = sum(value),",
				"     columnNaming: '$N$V',",
				"     lateral: true) ~> pivotDaily",
				"pivotWeeky sort(desc(reported_year_week, true),",
				"     asc(country, true)) ~> sortWeekly",
				"pivotDaily sort(desc(reported_year_week, true),",
				"     asc(country, true)) ~> sortDaily",
				"sortWeekly sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkHospitalAdmission",
				"sortDaily sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkDaily"
			]
		}
	}
}